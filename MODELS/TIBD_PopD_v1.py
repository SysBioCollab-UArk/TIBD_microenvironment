from pysb import *
from MODULES.Lemaire2004 import create_model_elements as create_Lemaire_ME
from MODULES.Harris2024 import create_model_elements as create_Harris_ME
from MODULES.perturbations import add_bisphosphonate_components

Model()

create_Lemaire_ME()  # TODO: consider passing in a scaling factor to adjust concentration units (e.g., pM to cells/mm)
create_Harris_ME(OB_OC_BONE_MODEL=1)
add_bisphosphonate_components()

# modify a few parameter values
R_0.value = 0.0  # fM
B_0.value = 0.0  # fM
C_0.value = 0.0  # fM
kB.value = 0.013  # /day

if __name__ == '__main__':

    from param_calibration import *
    from SIM_PROTOCOLS.sim_protocols import tumor_injection, tumor_bisphos_injection

    custom_priors = {'N': ('uniform', 0.3)}
    no_sample = ['R_0', 'B_0', 'C_0', 'f0', 'IL', 'IO', 'IP_const', 'Bone_0', 'nB', 'nC', 'Tumor_0', 'CC_ON',
                 'ALLEE_ON', 'A', 'Bisphos_0', 'k_bisphos_AOC']
    obs_labels = {'Bone_tot': 'bone density', 'C_obs': 'osteoclasts', 'OB_tot': 'osteoblasts',
                  'Tumor_tot': 'tumor cells'}

    # EXAMPLE 1
    # Simple example using a ParameterCalibration object to run PyDREAM for a data set with only one experiment
    # '''
    exp_data_file = '../DATA/TIBD_PopD_Mouse_Data.csv'
    calibrator = ParameterCalibration(model,
                                      exp_data_file,
                                      tumor_injection,
                                      priors=custom_priors,
                                      no_sample=no_sample)
    calibrator.run(niterations=50000, nchains=5, obs_labels=obs_labels, plot_results=True)
    # '''

    # EXAMPLE 2
    # A more complex example involving two experiments where some parameter values can vary between experiments
    '''
    exp_data_file = '../DATA/TIBD_PopD_Mouse_Data_2expts.csv'

    # If parameter values can vary between experiments, define groups of experiments where they are the same.
    # If a parameter value is unique to an experiment, the group will be length 1. The default is for parameter values
    # to be common across all experiments, in which case there will be one group containing indices for all experiments.
    # This is handled internally, so only need to define cases where param values are NOT common across all expts.
    param_expts_map = {'Cs': [['A', 'B']],  # this is just here to show what the default is
                       'k_tumor_div_basal': [['A'], ['B']],  # this and the following params can vary btwn the 2 expts
                       'k_tumor_dth': [['A'], ['B']],
                       'k_tumor_div_TGFb': [['A'], ['B']],
                       'k_tumor_PTHrP': [['A'], ['B']],
                       'k_tumor_OB': [['A'], ['B']],
                       'k_tumor_OC': [['A'], ['B']]}

    calibrator = ParameterCalibration(model,
                                      exp_data_file,
                                      [tumor_injection] * 2,
                                      priors=custom_priors,
                                      no_sample=no_sample,
                                      param_expts_map=param_expts_map)
    calibrator.run(niterations=50000, nchains=5, obs_labels=obs_labels, plot_results=True, 
                   plot_tc_args={'separate_plots': False})
    '''

    # EXAMPLE 3
    # Create plots using output files already generated by PyDREAM using the calibrator.create_figures() function
    '''
    import glob
    import os
    # get the existing PyDREAM output files
    path = os.getcwd()  # path to where PyDREAM generated files are - default is current working directory
    logps_files = glob.glob(os.path.join(path, 'dreamzs*logps*'))  # need to pass ALL 'logps' files
    samples_files = glob.glob(os.path.join(path, 'dreamzs*params*'))  # need to pass ALL 'params' files
    # create the ParameterCalibration object
    exp_data_file = '../DATA/TIBD_PopD_Mouse_Data.csv'
    calibrator = ParameterCalibration(model,
                                      exp_data_file,
                                      tumor_injection,
                                      priors=custom_priors,
                                      no_sample=no_sample)
    # call the 'create_figures' function
    calibrator.create_figures(logps_files, samples_files, obs_labels=obs_labels, show_plots=True,
                              plot_tc_args={'separate_plots': False})
    '''

    # EXAMPLE 4
    # Run simulations for the experimental condition and for predicting the effect of a perturbation, e.g., treatment
    # with zoledronic acid, using output files already generated by PyDREAM. To do this, we need to use the
    # 'ParameterCalibration.plot_timecourses' function directly. This function allows for an arbitrary number of
    # simulation protocols. Experimental data is optional and will only be plotted for sim_protocol[i] if i < n_expts.
    '''
    import glob
    import os
    # get the existing PyDREAM output files
    path = os.getcwd()  # path to where PyDREAM generated files are - default is current working directory
    logps_files = glob.glob(os.path.join(path, 'dreamzs*logps*'))  # need to pass ALL 'logps' files
    samples_files = glob.glob(os.path.join(path, 'dreamzs*params*'))  # need to pass ALL 'params' files
    # create the ParameterCalibration object (not strictly necessary since 'plot_timecourses' is a class method)
    exp_data_file = '../DATA/TIBD_PopD_Mouse_Data.csv'
    calibrator = ParameterCalibration(model,
                                      exp_data_file,
                                      tumor_injection,
                                      priors=custom_priors,
                                      no_sample=no_sample)
    # get various arguments needed for 'plot_timecourses'
    param_labels = [model.parameters[i].name for i in calibrator.parameter_idxs]
    param_samples = calibrator.plot_param_dist(samples_files, param_labels, show_plot=True)
    sim_protocols = [tumor_injection, tumor_bisphos_injection]  # 1 experiment, 1 perturbation
    tspans = [np.linspace(calibrator.tdata[0][0], calibrator.tdata[0][-1],
                          int((calibrator.tdata[0][-1] - calibrator.tdata[0][0]) * 10 + 1))] * len(sim_protocols)
    xlabel = 'time (day)'
    ylabels = [['amount (relative % BV/TV)'] + ['amount (fM)'] * 3] * len(sim_protocols)
    leg_labels = [['bone density', 'osteoclasts', 'osteoblasts', 'tumor cells'],
                  ['bone density (+ZA)', 'osteoclasts (+ZA)', 'osteoblasts (+ZA)', 'tumor cells (+ZA)']]
    calibrator.plot_timecourses(model, tspans, sim_protocols, param_samples, calibrator.parameter_idxs,
                                observables=calibrator.observables * len(sim_protocols), exp_data=calibrator.raw_data,
                                show_plot=True, separate_plots=False, xlabel=xlabel, ylabels=ylabels,
                                leg_labels=leg_labels)
    '''
